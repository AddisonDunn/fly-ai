{"version":3,"sources":["components/SearchBar.jsx","components/SearchBarContainer.jsx","components/NavigationBar.jsx","components/StartingPage.jsx","components/Quote.jsx","components/SearchResults.jsx","components/SearchPage.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","location_query_url","process","PORT","useState","error","setError","setDidLocationsLoad","locationResults","setLocationResults","searchText","updateSearchText","useEffect","fetch","then","res","json","result","map","place","locationName","PlaceName","RegionId","CountryName","PlaceId","substring","length","placeID","Grid","container","className","justify","alignItems","direction","item","name","fontSize","Autocomplete","id","onInputChange","event","value","onChange","setCityID","options","getOptionLabel","option","style","width","renderInput","params","TextField","label","SearchBarContainer","history","useHistory","originID","setOriginID","destinationID","setDestinationID","getDate","departureDate","setDepartureDate","arrivalDate","setArrivalDate","day","Date","toISOString","getTime","spacing","type","defaultValue","InputLabelProps","shrink","target","Button","disabled","variant","onClick","push","NavigationBar","AppBar","position","Toolbar","Typography","color","StartingPage","Container","getUTCFullYear","Quote","Card","CardContent","minPrice","airline","isDirect","departureAirport","arrivalAirport","SearchResults","quote_query_url","didSearchResultsLoad","setDidSearchResultsLoad","quotes","setQuotes","carriers","setCarriers","places","setPlaces","findCarriers","quoteCarrierIDs","airlineString","nextCarrier","forEach","carrierID","find","carrier","CarrierId","Name","findAirport","airportString","airport","IataCode","query","location","state","console","log","qs","stringify","method","Quotes","Carriers","Places","message","maxWidth","elem","flexGrow","MinPrice","Direct","OutboundLeg","CarrierIds","OriginId","DestinationId","QuoteId","SearchPage","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6bd5ba0.chunk.js","sourcesContent":["import TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport \"./StartingPage.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport FlightLandIcon from '@material-ui/icons/FlightLand';\nimport Grid from '@material-ui/core/Grid';\nimport { useEffect, useState } from \"react\";\n\n\n\nfunction SearchBar(props) {\n\n  let port_number = 8080;\n  let location_query_url = \"\";\n  if (process.env.NODE_ENV === \"development\") {\n    port_number = 8080; // development\n    location_query_url = \"http://localhost:\" + port_number + \"/getLocation/\";\n  }\n  else if (process.env.NODE_ENV === \"production\") {\n    port_number = process.env.PORT || 80; //production\n    location_query_url = \"/getLocation/\";\n  }\n  // location_query_url = \"http://localhost:\" + port_number + \"/getLocation/\";\n\n  const [error, setError] = useState(null);\n  const [didLocationsLoad, setDidLocationsLoad] = useState(false);\n  const [locationResults, setLocationResults] = useState([]);\n  const [searchText, updateSearchText] = useState(\"\");\n\n\n  useEffect(() => {\n    if(!searchText) {\n      return;\n    }\n    fetch(location_query_url + searchText)\n          .then(res => res.json())\n          .then(\n              (result) => {\n                  setDidLocationsLoad(true);\n                  setLocationResults(result.map(place => {\n                    const locationQueryString = place.PlaceName + \", \" + (place.RegionId? place.RegionId: place.CountryName ) + \" (\" + ( place.PlaceId.substring(0, place.PlaceId.length - 4))  + \")\";\n                    return {locationName: locationQueryString, placeID: place.PlaceId};\n                  }));\n              },\n              // Note: it's important to handle errors here\n              // instead of a catch() block so that we don't swallow\n              // exceptions from actual bugs in components.\n              (error) => {\n                  setDidLocationsLoad(true);\n                  setError(error);\n              }\n          )\n  }, [searchText])\n\n  function handleInputText(event, value) {\n    updateSearchText(value);\n  }\n\n  function onCitySelection(event, value) {\n    if(value) {\n      props.setCityID(value.placeID);\n    }\n    else {\n      props.setCityID(null);\n    }\n  }\n\n  if(error) {\n    return <div> {error} </div>\n  }\n  else {\n\n    return <div>\n    <Grid container className=\"searchBar\" justify=\"center\" alignItems=\"center\" direction=\"row\">\n      <Grid item>\n        {(props.name === \"originSearchBar\") ? <FlightTakeoffIcon fontSize=\"large\" /> : <FlightLandIcon fontSize=\"large\" />}\n      </Grid>\n      <Grid item>\n        <Autocomplete\n          name={props.name}\n          id={props.name}\n          onInputChange={handleInputText}\n          onChange={onCitySelection}\n          options={locationResults}\n          getOptionLabel={(option) => option.locationName}\n          style={{ width: 300 }}\n          renderInput={(params) => <TextField {...params} label={props.label} />}\n\n        /></Grid>\n    </Grid>\n    </div>;\n\n  }\n\n  \n}\n\nexport default SearchBar;","\nimport SearchBar from \"./SearchBar\";\nimport Grid from '@material-ui/core/Grid';\nimport \"./StartingPage.css\";\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { useHistory } from 'react-router-dom';\nimport { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\n\n\nfunction SearchBarContainer() {\n\n  let history = useHistory();\n  const [originID, setOriginID] = useState(\"\");\n  const [destinationID, setDestinationID] = useState(\"\");\n  const [departureDate, setDepartureDate] = useState(getDate(\"today\"));\n  const [arrivalDate, setArrivalDate] = useState(getDate(\"week-from-today\"));\n\n\n  function submitSearch() {\n    history.push(\"/search\", [originID, destinationID, departureDate, arrivalDate]);\n  }\n\n  function getDate(day) {\n    if(day === \"today\") {\n      return (new Date().toISOString()).substring(0, 10);\n    }\n    else if (day === \"week-from-today\") {\n      return ( new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000).toISOString()).substring(0, 10)\n    }\n  }\n\n\n  return <div>\n      <Grid container direction=\"row\" justify=\"center\" spacing={5} >\n        <Grid item className=\"dateField\">\n          <TextField\n            id=\"date\"\n            label=\"Departure date\"\n            type=\"date\"\n            defaultValue={getDate(\"today\")}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={(event) => {\n              setDepartureDate(event.target.value)\n            }}\n          />\n\n        </Grid>\n\n        <Grid item className=\"ghost\" />\n        \n        <Grid item className=\"dateField\">\n          <TextField\n            id=\"date\"\n            label=\"Arrival date\"\n            type=\"date\"\n            defaultValue={getDate(\"week-from-today\")}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={(event) => {\n              setArrivalDate(event.target.value)\n            }}\n          />\n\n        </Grid>\n      </Grid>\n\n      <Grid container direction=\"row\" justify=\"center\" spacing={5} >\n        <Grid item>\n          <SearchBar name=\"originSearchBar\" label=\"Origin city\" setCityID={setOriginID} />\n        </Grid>\n        <Grid item>\n          <SearchBar name=\"destinationSearchBar\" label=\"Desination city\" setCityID={setDestinationID} />\n        </Grid>\n      </Grid>\n\n\n      <Button disabled={!(originID && destinationID)} variant=\"contained\" className=\"searchButton\" onClick={submitSearch}> <SearchIcon className=\"searchIcon\" /> Search for flights</Button>\n  </div>;\n}\n\nexport default SearchBarContainer;","import AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import MenuIcon from '@material-ui/core/MenuIcon';\nimport \"./NavigationBar.css\";\n\nfunction NavigationBar() {\n\n    return <div><AppBar position=\"static\">\n    <Toolbar variant=\"regular\" className=\"navigationBar\">\n      {/* <IconButton edge=\"start\" className={\"\"} color=\"inherit\" aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton> */}\n      \n      <Typography className=\"title\" variant=\"h6\" color=\"inherit\">\n        My Fly\n      </Typography>\n      {/* <Typography className=\"navItem\" variant=\"h6\" color=\"inherit\">\n        Donate\n      </Typography>\n      \n      <Typography className=\"navItem\" variant=\"h6\" color=\"inherit\">\n        Learn more\n      </Typography>\n      <IconButton aria-label=\"settings\" edge=\"end\" color=\"inherit\"><SettingsIcon />\n      </IconButton> */}\n    </Toolbar>\n  </AppBar>\n  </div>\n}\n\nexport default NavigationBar;","import SearchBarContainer from \"./SearchBarContainer\";\nimport NavigationBar from \"./NavigationBar\";\nimport Grid from '@material-ui/core/Grid';\nimport \"./core.css\";\nimport Container from '@material-ui/core/Container';\nimport \"./StartingPage.css\";\n\n\n\n\nfunction StartingPage() {\n  return (\n    <div>\n      <NavigationBar />\n      <header> <h1> Know the best flight price, quickly. </h1></header>\n      <Container className=\"startingPageMiddle\">\n        <SearchBarContainer />\n      </Container>\n      <Container className=\"startingPageEnd\" >\n        <Grid container direction=\"row\"  justify=\"center\" >\n          <Grid item>\n            <span>&#169; Copyright {new Date().getUTCFullYear()} Fly-AI</span>\n          </Grid>\n        </Grid>\n      </Container>\n\n    </div>\n  );\n}\n\nexport default StartingPage;","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Grid } from '@material-ui/core';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport \"./ResultsPage.css\";\n\n\n\nfunction Quote(props) {\n\n\n    return <div>\n\n        <Card className=\"quoteCard\">\n            <CardContent>\n\n                <Grid container  spacing={2} alignItems=\"center\">\n\n                    <Grid item className=\"quoteCardItem\">\n                        <p className=\"priceText\">{\"$\" + props.minPrice}</p>\n                    </Grid>\n                    <Grid item className=\"quoteCardItem\">\n                        <p> {props.airline} </p>\n                        <p> - </p>\n                        <p> {props.isDirect?\"Direct\":\"Indirect\"} </p>\n                    </Grid>\n                    <Grid item className=\"quoteCardItem airports\">\n                        <p className=\"airportText\"> {props.departureAirport} </p>\n                        <p><ArrowRightAltIcon /></p>\n                        <p className=\"airportText\"> {props.arrivalAirport} </p>\n                    </Grid>\n\n                </Grid>\n            </CardContent>\n        </Card>\n\n    </div>;\n\n}\n\nexport default Quote;","import { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport qs from 'query-string';\nimport Grid from '@material-ui/core/Grid';\nimport Quote from \"./Quote\";\nimport { Container } from \"@material-ui/core\";\nimport \"./ResultsPage.css\";\n\n\n\nfunction SearchResults() {\n\n    let port_number = null;\n    let quote_query_url = \"\";\n    if (process.env.NODE_ENV === \"development\") {\n        port_number = 8080; // development\n        quote_query_url = \"http://localhost:\" + port_number + \"/search?\";\n    }\n    else if (process.env.NODE_ENV === \"production\") {\n        port_number = process.env.PORT || 80; //production\n        quote_query_url = \"/search?\";\n    }\n\n\n    let history = useHistory();\n\n    const [error, setError] = useState(null);\n    const [didSearchResultsLoad, setDidSearchResultsLoad] = useState(false);\n    const [quotes, setQuotes] = useState([]);\n    const [carriers, setCarriers] = useState([]);\n    const [places, setPlaces] = useState([]);\n\n    useEffect(() => {\n        const query = {originID: history.location.state[0],\n            destinationID: history.location.state[1],\n            departureDate: history.location.state[2],\n            arrivalDate: history.location.state[3]\n        }\n        console.log(qs.stringify(query))\n        fetch(quote_query_url + qs.stringify(query), {\n            method: \"GET\"\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setDidSearchResultsLoad(true);\n                    setQuotes(\n                        result.Quotes\n                    );\n                    setCarriers(result.Carriers);\n                    setPlaces(result.Places);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setDidSearchResultsLoad(true);\n                    setError(error);\n                }\n            )\n    }, [])\n\n    function findCarriers(quoteCarrierIDs) {\n        let airlineString = \"\";\n        let nextCarrier = {};\n        quoteCarrierIDs.forEach(carrierID => {\n            if(airlineString) {\n                airlineString += \", \"\n            }\n            nextCarrier = carriers.find(carrier => carrier.CarrierId === carrierID);\n            if(nextCarrier) {\n                airlineString += nextCarrier.Name;\n            }\n            \n        });\n        return airlineString;\n    }\n\n    function findAirport(id) {\n        let airportString = \"\";\n        var airport = places.find(airport => airport.PlaceId === id)\n        if(airport) {\n            airportString += airport.Name;\n            airportString += \" (\" + airport.IataCode + \")\";\n        }\n        return airportString;\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!didSearchResultsLoad) {\n        return <div>Loading...</div>;\n      } else if(!quotes) {\n        return <div>No Quotes found. </div>\n      }\n        else {\n        return (<div>\n\n            { console.log(quotes) }\n\n            <Container maxWidth=\"md\" className=\"resultsContainer\"> \n\n            <Grid container direction=\"column\" justify=\"center\" spacing={3}>\n            {/* <Grid item >\n            <Quote id={quotes[0].QuoteId} minPrice={quotes[0].MinPrice} isDirect={quotes[0].Direct} />\n            </Grid> */}\n            {quotes.map( (elem) =>\n                <Grid key={elem.QuoteId} item style={{flexGrow: 1}}>\n                        <Quote \n                        minPrice={elem.MinPrice} \n                        isDirect={elem.Direct} \n                        airline={findCarriers(elem.OutboundLeg.CarrierIds)}\n                        departureAirport={findAirport(elem.OutboundLeg.OriginId)}\n                        arrivalAirport={findAirport(elem.OutboundLeg.DestinationId)} />\n                </Grid>\n              )}\n            \n            </Grid>\n\n            </Container>\n            </div>\n        );\n      }\n\n\n}\n\nexport default SearchResults;","import SearchResults from \"./SearchResults\";\nimport NavigationBar from \"./NavigationBar\";\nimport { useHistory } from 'react-router-dom';\nimport { Button } from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nfunction SearchPage() {\n    let history = useHistory();\n\n    function newSearch() {\n        history.push(\"/\");\n    }\n\n    return <div>\n        <NavigationBar />\n        <Button variant=\"contained\" className=\"backButton\" onClick={newSearch}> <SearchIcon className=\"searchIcon\" /> New Search </Button>\n        <SearchResults />\n    </div>;\n}\n\nexport default SearchPage;","import './App.css';\nimport StartingPage from \"./StartingPage\";\nimport SearchPage from \"./SearchPage\";\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header>  */}\n      {/* <StartingPage /> */}\n      <Switch>\n        <Route path=\"/search\">\n          <SearchPage />\n        </Route>\n        <Route exact path=\"/\">\n          <StartingPage />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Router><App /></Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}