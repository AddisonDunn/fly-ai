{"ast":null,"code":"var _jsxFileName = \"/Users/addisondunn/projects/my-dashboard/src/components/SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport \"./StartingPage.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport FlightLandIcon from '@material-ui/icons/FlightLand';\nimport Grid from '@material-ui/core/Grid';\nimport { useEffect, useState } from \"react\";\nimport SearchResults from './SearchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = [\"Paris\", \"London\"];\n\nfunction SearchBar(props) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [didLocationsLoad, setDidLocationsLoad] = useState(false);\n  const [locationResults, setLocationResults] = useState([]);\n  const [searchText, updateSearchText] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:8080/getLocation/\" + searchText).then(res => res.json()).then(result => {\n      setDidLocationsLoad(true);\n      setLocationResults(result.map(place => {\n        const locationQueryString = place.PlaceName + \", \" + (place.RegionId ? place.RegionId : place.CountryName) + \" (\" + place.PlaceId.substring(0, place.PlaceId.length - 4) + \")\";\n        return {\n          locationName: place.placeId,\n          placeID: place.placeId\n        };\n      }));\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setDidLocationsLoad(true);\n      setError(error);\n    });\n  }, [searchText]);\n\n  function handleInputText(event, value) {\n    updateSearchText(value);\n  }\n\n  function onCitySelection(event, value) {\n    // props.setCity(value.placeID);\n    console.log(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"searchBar\",\n      justify: \"center\",\n      alignItems: \"center\",\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: props.name === \"originSearchBar\" ? /*#__PURE__*/_jsxDEV(FlightTakeoffIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 45\n        }, this) : /*#__PURE__*/_jsxDEV(FlightLandIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 86\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          name: props.name,\n          id: props.name,\n          onInputChange: handleInputText,\n          onChange: onCitySelection,\n          options: locationResults,\n          getOptionLabel: option => option.locationName,\n          style: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: props.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SearchBar, \"SM6FzfAPZQKeidDl1dZlnnMAbw8=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/addisondunn/projects/my-dashboard/src/components/SearchBar.jsx"],"names":["TextField","Autocomplete","FlightTakeoffIcon","FlightLandIcon","Grid","useEffect","useState","SearchResults","cities","SearchBar","props","error","setError","didLocationsLoad","setDidLocationsLoad","locationResults","setLocationResults","searchText","updateSearchText","fetch","then","res","json","result","map","place","locationQueryString","PlaceName","RegionId","CountryName","PlaceId","substring","length","locationName","placeId","placeID","handleInputText","event","value","onCitySelection","console","log","name","option","width","params","label"],"mappings":"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","sourcesContent":["import TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport \"./StartingPage.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport FlightLandIcon from '@material-ui/icons/FlightLand';\nimport Grid from '@material-ui/core/Grid';\nimport { useEffect, useState } from \"react\";\nimport SearchResults from './SearchResults';\n\nconst cities = [\n  \"Paris\",\n  \"London\"];\n\nfunction SearchBar(props) {\n\n  const [error, setError] = useState(null);\n  const [didLocationsLoad, setDidLocationsLoad] = useState(false);\n  const [locationResults, setLocationResults] = useState([]);\n  const [searchText, updateSearchText] = useState(\"\");\n\n\n  useEffect(() => {\n      fetch(\"http://localhost:8080/getLocation/\" + searchText)\n          .then(res => res.json())\n          .then(\n              (result) => {\n                  setDidLocationsLoad(true);\n                  setLocationResults(result.map(place => {\n                    const locationQueryString = place.PlaceName + \", \" + (place.RegionId? place.RegionId: place.CountryName ) + \" (\" + ( place.PlaceId.substring(0, place.PlaceId.length - 4))  + \")\";\n                    return {locationName: place.placeId, placeID: place.placeId};\n                  }));\n              },\n              // Note: it's important to handle errors here\n              // instead of a catch() block so that we don't swallow\n              // exceptions from actual bugs in components.\n              (error) => {\n                  setDidLocationsLoad(true);\n                  setError(error);\n              }\n          )\n  }, [searchText])\n\n  function handleInputText(event, value) {\n    updateSearchText(value);\n  }\n\n  function onCitySelection(event, value) {\n    // props.setCity(value.placeID);\n    console.log(value);\n  }\n\n\n\n  return <div><Grid container className=\"searchBar\"  justify=\"center\" alignItems=\"center\" direction=\"row\">\n    <Grid item>\n      {(props.name === \"originSearchBar\") ? <FlightTakeoffIcon fontSize=\"large\" /> : <FlightLandIcon fontSize=\"large\" />}\n    </Grid>\n    <Grid item>\n      <Autocomplete\n        name={props.name}\n        id={props.name}\n        onInputChange={handleInputText}\n        onChange={onCitySelection}\n        options={locationResults}\n        getOptionLabel={(option) => option.locationName}\n        style={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label={props.label}/>}\n\n      /></Grid>\n      </Grid>\n      </div>;\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}